{%- set license_classifiers = {
    'MIT': 'License :: OSI Approved :: MIT License',
    'BSD-3-Clause': 'License :: OSI Approved :: BSD License',
    'ISC': 'License :: OSI Approved :: ISC License (ISCL)',
    'Apache-2.0': 'License :: OSI Approved :: Apache Software License',
    'GPL-3.0-only': 'License :: OSI Approved :: GNU General Public License v3 (GPLv3)'
} -%}
[tool]
[tool.poetry]
name = "{{ cookiecutter.project_slug }}"
version = "{{ cookiecutter.version }}"
homepage = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}"
description = "{{ cookiecutter.project_short_description }}."
authors = ["{{ cookiecutter.full_name.replace('\"', '\\\"') }} <{{ cookiecutter.email }}>"]
readme = "README.md"
{%- if cookiecutter.open_source_license in license_classifiers %}
license =  "{{ cookiecutter.open_source_license }}"
{%- endif %}
classifiers=[
    'Development Status :: 2 - Pre-Alpha',
    'Intended Audience :: Developers',
{%- if cookiecutter.open_source_license in license_classifiers %}
    '{{ license_classifiers[cookiecutter.open_source_license] }}',
{%- endif %}
    'Natural Language :: English',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
]
packages = [
    { include = "{{ cookiecutter.pkg_name }}" },
    { include = "tests", format = "sdist" },
]

[tool.poetry.dependencies]
python = ">=3.9.13,<4.0"
{%- if cookiecutter.command_line_interface|lower == 'click' %}
click = "8.0.1"
{%- endif %}

black  = { version = "^21.5b2", optional = true}
isort  = { version = "^5.8.0", optional = true}
flake8  = { version = "^3.9.2", optional = true}
flake8-docstrings = { version = "^1.6.0", optional = true }
{%- if cookiecutter.use_mypy == 'y' %}
mypy = {version = "^0.900", optional = true}
{%- endif %}
pytest  = { version = "^7.1.2", optional = true}
pytest-cov  = { version = "^3.0.0", optional = true}
tox  = { version = "^3.25.0", optional = true}
virtualenv  = { version = "^20.2.2", optional = true}
pip  = { version = "^20.3.1", optional = true}
twine  = { version = "^3.3.0", optional = true}
{%- if 'mkdocs' in cookiecutter.doc_generator|lower %}
mkdocs  = { version = "^1.1.2", optional = true}
mkdocs-include-markdown-plugin  = { version = "^1.0.0", optional = true}
mkdocs-material  = { version = "^6.1.7", optional = true}
mkdocstrings  = { version = "^0.15.2", optional = true}
mkdocs-material-extensions  = { version = "^1.0.1", optional = true}
mkdocs-autorefs = {version = "^0.2.1", optional = true}
{%- else %}
Sphinx = { version = "4.2.0", optional = true }
sphinx-rtd-theme = { version = "1.0.0", optional = true }
sphinxcontrib-napoleon = { version = "0.7", optional = true }
m2r2 = { version = "0.3.2", optional = true }
{%- endif %}
pre-commit = {version = "^2.12.0", optional = true}
toml = {version = "^0.10.2", optional = true}
commitizen = {version = "^2.27.1", optional = true}
darglint = {version = "^1.8.1", optional = true}
bandit = {version = "^1.7.4", optional = true}
yamllint = {version = "^1.26.3", optional = true}
tqdm = "^4.64.0"
codespell = {version = "^2.1.0", optional = true}
pylint = {version = "^2.14.3", optional = true}


[tool.poetry.extras]
test = [
    "pytest",
    "black",
    "isort",
    {%- if cookiecutter.use_mypy == 'y' %}
    "mypy",
    {%- endif %}
    "flake8",
    "flake8-docstrings",
    "pytest-cov"
    "bandit",
    "yamllint",
    "codespell",
    "pylint",
    "darglint"
    ]

dev = ["tox", "pre-commit", "virtualenv", "pip", "twine", "toml", "tqdm"]

doc = [
{%- if 'mkdocs' in cookiecutter.doc_generator|lower %}
    "mkdocs",
    "mkdocs-include-markdown-plugin",
    "mkdocs-material",
    "mkdocstrings",
    "mkdocs-material-extension",
    "mkdocs-autorefs"
{%- else %}
    "Sphinx",
    "sphinx-rtd-theme",
    "sphinxcontrib-napoleon",
    "m2r2"
{%- endif %}
    ]

{% if cookiecutter.command_line_interface|lower == 'click' -%}
[tool.poetry.scripts]
{{ cookiecutter.project_slug }} = '{{ cookiecutter.pkg_name }}.cli_tools.cli:main'

{% endif -%}
[tool.black]
line-length = 120
skip-string-normalization = true
target-version = ['py39']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120
skip_gitignore = true
# you can skip files as below
#skip_glob = ["docs/conf.py", "path/*"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.commitizen]
name = "cz_conventional_commits"
version = "{{ cookiecutter.version }}"
version_files = [
    "{{ cookiecutter.pkg_name }}/__init__.py:__version__",
    "pyproject.toml:version"
]
signed_tag = true
bump_message = 'Bump version: $current_version -> $new_version'
update_changelog_on_bump = true
style = [
    ["qmark", "fg:#ff9d00 bold"],
    ["question", "bold"],
    ["answer", "fg:#ff9d00 bold"],
    ["pointer", "fg:#ff9d00 bold"],
    ["highlighted", "fg:#ff9d00 bold"],
    ["selected", "fg:#cc5454"],
    ["separator", "fg:#cc5454"],
    ["instruction", ""],
    ["text", ""],
    ["disabled", "fg:#858585 italic"]
]


[tool.bandit]
tests = [
    # list from https://github.com/outscale/osc-sdk-python/blob/master/bandit.conf
    "B101",  # assert_used
    "B103",  # set_bad_file_permissions
    "B105",  # hardcoded_password_string
    "B106",  # hardcoded_password_funcarg
    "B107",  # hardcoded_password_default
    "B108",  # hardcoded_tmp_directory
    "B110",  # try_except_pass
    "B112",  # try_except_continue
    "B108",  # hardcoded_tmp_directory
    "B301",  # pickle library
    "B303",  # MD5 insecure hash function
    "B304",  # insecure ciphers
    "B305",  # insecure cipher modes
    "B306",  # deprecated mktemp
    "B307",  # eval - Use of possibly insecure function - consider using safer ast.literal_eval
    "B313",  # xml_bad_cElementTree
    "B314",  # xml_bad_ElementTree
    "B315",  # xml_bad_expatreader
    "B316",  # xml_bad_expatbuilder
    "B317",  # xml_bad_sax
    "B318",  # xml_bad_minidom
    "B319",  # xml_bad_pulldom
    "B320",  # xml_bad_etree
    "B323",  # unverified_context
    "B324",  # hashlib_new_insecure_functions
    "B325",  # tempnam
    "B501",  # request_with_no_cert_validation
    "B502",  # ssl_with_bad_version
    "B503",  # ssl_with_bad_defaults
    "B504",  # ssl_with_no_version
    "B505",  # weak_cryptographic_key
    "B506",  # yaml_load
    "B507",  # ssh_no_host_key_verification
    "B601",  # paramiko_calls
    "B602",  # subprocess_popen_with_shell_equals_true
    "B604",  # any_other_function_with_shell_equals_true
    "B605",  # start_process_with_a_shell
    "B606",  # start_process_with_no_shell
    "B607",  # start_process_with_partial_path
    "B608",  # hardcoded_sql_expressions
    "B609"   # linux_commands_wildcard_injection
]


#[tool.pylint]
#ignore-paths = [
#    "folder/*"
#]
