# build_clib and build_ext are dynamically changed when "poetry build" or "poetry install" commands are executed

# used mingw32 into MSYS2 by poetry build on windows, otherwise MSVC is used and build fails
# https://stackoverflow.com/questions/36189453/how-to-change-python-default-compiler-to-gcc
# https://wiki.python.org/moin/WindowsCompilers
[build_clib]
compiler = mingw32

# used mingw32 into MSYS2 by poetry build on windows, otherwise MSVC is used and build fails
[build_ext]
compiler = mingw32

# to avoid building package under windows (that fails), execute tox with
# poetry run tox --skip-pkg-install --direct-yolo -e ...
#  ref https://stackoverflow.com/questions/16737260/how-to-tell-distutils-to-use-gcc
# ref https://github.com/gpongelli/cookiecutter-pylibrary/blob/master/%7B%7Bcookiecutter.repo_name%7D%7D/ci/templates/.github/workflows/github-actions.yml

[flake8]
max-line-length = 120
max-complexity = 18
ignore = E203, E266, W503
docstring-convention = {{ cookiecutter.docstrings_style }}
doctests = True
per-file-ignores =
	__init__.py:F401
	{{ cookiecutter.pkg_name }}/cli_tools/cli.py:DAR101
exclude = .git,
    __pycache__,
    setup.py,
    build,
    dist,
    docs,
    releases,
    .venv,
    .tox,
    .mypy_cache,
    .pytest_cache,
    .vscode,
    .github,
    # By default test codes will be linted.
    # tests

{%- if cookiecutter.use_mypy == 'y' %}

[mypy]
ignore_missing_imports = True
show_error_codes = True
{%- endif %}


[darglint]
strictness=full
docstring_style=google
message_template={path}:{line} @{obj} {msg_id}: {msg}
ignore_regex = ^_(.*)|{{ cookiecutter.pkg_name }}|main


# https://coverage.readthedocs.io/en/latest/config.html
[coverage:run]
# uncomment the following to omit files during running
#omit =
#    path/folder/file
#    path/folder/*
branch = True

[coverage:report]
show_missing = True
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    def main

[coverage:html]
directory = coverage_html
show_contexts = True

[gh-actions]
python =
    3.9: py39, format, lint, build


[tox:tox]
isolated_build = true
min_version = 4.0  # platform specification support is available since version 2.0
envlist = lint, format, py{3.8, 3.9, 3.10, 3.11}-{lin,mac,win}

[dev]
allowlist_externals =
    poetry
    python
commands =
    poetry run python --version
    # python --version
    poetry lock --no-update
    poetry install -v --with devel --no-root --sync
    poetry run tox --version
    poetry run pip --version
    poetry run pip list --format=freeze

[testenv]
description = Run tests
# environment will be skipped if regular expression does not match against the sys.platform string
platform = lin: linux
	mac: darwin
	win: win32
allowlist_externals =
    {[dev]allowlist_externals}
passenv = *
setenv =
	py3.8-{lin, mac}: PYTH = python3.8
	py3.9-{lin, mac}: PYTH = python3.9
	py3.10-{lin, mac}: PYTH = python3.10
	py3.11-{lin, mac}: PYTH = python3.11
	py{3.8, 3.9, 3.10, 3.11}-{win}: PYTH = python
	COVERAGE_FILE = .coverage_{envname}
	PYTHONPATH = {toxinidir}
	PYTHONWARNINGS = ignore
commands_pre =
	# poetry needs name of python binary
	poetry env use {env:PYTH}
    # in case of C/C++ extension, it's better to rebuild package for every python version & env
    {[testenv:build]commands}
commands =
    # poetry install -v
    # install the package or pytest cannot find it
    poetry install
    poetry run pytest {posargs:-vv} --cov-report=html:html_coverage_{envname} --cov-report=xml:xml_coverage_{envname}.xml
#    pytest --cov={{ cookiecutter.pkg_name }} --cov-branch --cov-report=xml --cov-report=term-missing tests

