# build_clib and build_ext are dynamically changed when "poetry build" or "poetry install" commands are executed

# used mingw32 into MSYS2 by poetry build on windows, otherwise MSVC is used and build fails
# https://stackoverflow.com/questions/36189453/how-to-change-python-default-compiler-to-gcc
# https://wiki.python.org/moin/WindowsCompilers
[build_clib]
compiler = mingw32

# used mingw32 into MSYS2 by poetry build on windows, otherwise MSVC is used and build fails
[build_ext]
compiler = mingw32

# to avoid building package under windows (that fails), execute tox with
# poetry run tox --skip-pkg-install --direct-yolo -e ...
#  ref https://stackoverflow.com/questions/16737260/how-to-tell-distutils-to-use-gcc
# ref https://github.com/gpongelli/cookiecutter-pylibrary/blob/master/%7B%7Bcookiecutter.repo_name%7D%7D/ci/templates/.github/workflows/github-actions.yml

[flake8]
max-line-length = 120
max-complexity = 18
ignore = E203, E266, W503
docstring-convention = {{ cookiecutter.docstrings_style }}
doctests = True
per-file-ignores =
	__init__.py:F401
	{{ cookiecutter.pkg_name }}/cli_tools/cli.py:DAR101
exclude = .git,
    __pycache__,
    setup.py,
    build,
    dist,
    docs,
    releases,
    .venv,
    .tox,
    .mypy_cache,
    .pytest_cache,
    .vscode,
    .github,
    # By default test codes will be linted.
    # tests

{%- if cookiecutter.use_mypy == 'y' %}

[mypy]
ignore_missing_imports = True
show_error_codes = True
{%- endif %}


[darglint]
strictness=full
docstring_style=google
message_template={path}:{line} @{obj} {msg_id}: {msg}
ignore_regex = ^_(.*)|{{ cookiecutter.pkg_name }}|main


[tool:pytest]
testpaths = tests
addopts =
    --cov
    --cov-report=term-missing
    --cov={{ cookiecutter.pkg_name }}
    --cov-append

[coverage:run]
# uncomment the following to omit files during running
#omit =
#    path/folder/file
#    path/folder/*
branch = True

[coverage:report]
show_missing = True
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    def main

[coverage:html]
directory = coverage_html
show_contexts = True

[gh-actions]
python =
    3.9: py39, format, lint, build


[tox:tox]
isolated_build = true
min_version = 4.0  # platform specification support is available since version 2.0
envlist = lint, format, py{3.8, 3.9, 3.10, 3.11}-{lin,mac,win}

[dev]
allowlist_externals =
    poetry
    python
commands =
    poetry run python --version
    # python --version
    poetry lock --no-update
    poetry install -v --with devel --no-root --sync
    poetry run tox --version
    poetry run pip --version
    poetry run pip list --format=freeze

[testenv]
description = Run tests
# environment will be skipped if regular expression does not match against the sys.platform string
platform = lin: linux
	mac: darwin
	win: win32
allowlist_externals =
    {[dev]allowlist_externals}
passenv = *
setenv =
	py3.8-{lin, mac}: PYTH = python3.8
	py3.9-{lin, mac}: PYTH = python3.9
	py3.10-{lin, mac}: PYTH = python3.10
	py3.11-{lin, mac}: PYTH = python3.11
	py{3.8, 3.9, 3.10, 3.11}-{win}: PYTH = python
	COVERAGE_FILE = .coverage_{envname}
	PYTHONPATH = {toxinidir}
	PYTHONWARNINGS = ignore
commands_pre =
	# poetry needs name of python binary
	poetry env use {env:PYTH}
    # in case of C/C++ extension, it's better to rebuild package for every python version & env
    {[testenv:build]commands}
commands =
    # poetry install -v
    # install the package or pytest cannot find it
    poetry install
    poetry run pytest {posargs:-vv} --cov-report=html:html_coverage_{envname} --cov-report=xml:xml_coverage_{envname}.xml
#    pytest --cov={{ cookiecutter.pkg_name }} --cov-branch --cov-report=xml --cov-report=term-missing tests

[testenv:format]
description = Format the code
ignore_errors = True
skip_install = true
allowlist_externals =
    {[dev]allowlist_externals}
commands_pre =
    {[dev]commands}
commands =
    poetry run isort {{ cookiecutter.pkg_name }} tests
    poetry run black {{ cookiecutter.pkg_name }} tests


# to be manually run before license environment
[testenv:pre-license]
description = PRE-License step to set year into an env file
ignore_errors = True
skip_install = true
allowlist_externals =
    {[dev]allowlist_externals}
commands_pre =
    {[dev]commands}
commands =
    poetry run python -c "from datetime import datetime;print('YEAR={}'.format(str(datetime.now().year)))" > year.log


# run pre-license environment before this one
[testenv:license]
description = License files according to REUSE 3.0
ignore_errors = True
skip_install = true
allowlist_externals =
    {[dev]allowlist_externals}
setenv =
    file|year.log
commands_pre =
    {[dev]commands}
commands =
#  --merge-copyrights is used to add following years to annotation
    poetry run reuse annotate --license={{ cookiecutter.open_source_license }} --copyright="{{ cookiecutter.full_name.replace('\"', '\\\"') }}" --year="{env:YEAR:{% now 'local', '%Y'  %}}" --merge-copyrights $(find ./{{ cookiecutter.pkg_name }} ./tests ./docs -name "*.py")
    poetry run reuse annotate --license={{ cookiecutter.open_source_license }} --copyright="{{ cookiecutter.full_name.replace('\"', '\\\"') }}" --year="{env:YEAR:{% now 'local', '%Y'  %}}" --merge-copyrights --force-dot-license $(find ./{{ cookiecutter.pkg_name }} ./tests ./docs -name "*.json")
    poetry run reuse annotate --license={{ cookiecutter.open_source_license }} --copyright="{{ cookiecutter.full_name.replace('\"', '\\\"') }}" --year="{env:YEAR:{% now 'local', '%Y'  %}}" --merge-copyrights $(find ./.github \( -name "*.yml" -o -name "*.md" \) )
    poetry run reuse annotate --license={{ cookiecutter.open_source_license }} --copyright="{{ cookiecutter.full_name.replace('\"', '\\\"') }}" --year="{env:YEAR:{% now 'local', '%Y'  %}}" --merge-copyrights --style python ./.editorconfig ./.gitignore ./.yamllint ./.pre-commit-config.yaml
    poetry run reuse annotate --license={{ cookiecutter.open_source_license }} --copyright="{{ cookiecutter.full_name.replace('\"', '\\\"') }}" --year="{env:YEAR:{% now 'local', '%Y'  %}}" --merge-copyrights ./docs/Makefile ./docs/make.bat ./pyproject.toml
    poetry run reuse annotate --license={{ cookiecutter.open_source_license }} --copyright="{{ cookiecutter.full_name.replace('\"', '\\\"') }}" --year="{env:YEAR:{% now 'local', '%Y'  %}}" --merge-copyrights --force-dot-license $(find . -maxdepth 1  -name "*.rst" -o -name "*.md" -o -name "*.lock" -o -name "*.cfg")
    poetry run reuse download --all
    poetry run python -c "from pathlib import Path;import os;f=Path(Path.cwd() / 'LICENSES/{{ cookiecutter.open_source_license }}.txt');f.write_text(f.read_text().replace('{% now 'local', '%Y' %} {{ cookiecutter.full_name.replace('\"', '\\\"') }}', '{% now 'local', '%Y' %} - {} {{ cookiecutter.full_name.replace('\"', '\\\"') }}'.format(os.environ['YEAR'])))"
    sed -i '' -e 's/<year>/{% now 'local', '%Y' %}/g;s/<copyright holders>/{{ cookiecutter.full_name.replace('\"', '\\\"') }}/g' LICENSES/{{ cookiecutter.open_source_license }}.txt
    # Windows Call
    # poetry run reuse annotate --license=MIT --copyright="{{ cookiecutter.full_name.replace('\"', '\\\"') }}" --year="{% now 'local', '%Y' %}" --merge-copyrights --force-dot-license $(Get-ChildItem .\tests\*.png)
# year.log file is also used in doc environment
#commands_post =
#    poetry run python -c "from pathlib import Path;Path(Path.cwd() / 'year.log').unlink(missing_ok=True)"


# run pre-license environment before this one - manually into powershell
[testenv:license-win]
description = License files according to REUSE 3.0
ignore_errors = True
skip_install = true
allowlist_externals =
    {[dev]allowlist_externals}
setenv =
    file|year.log
commands_pre =
    {[dev]commands}
commands =
    (Get-ChildItem -Recurse -Path .\{{ cookiecutter.pkg_name }}\*.py,.\tests\*.py,.\docs\*.py).ForEach({poetry run reuse annotate --license={{ cookiecutter.open_source_license }} --copyright="{{ cookiecutter.full_name.replace('\"', '\\\"') }}" --year="{env:YEAR:{% now 'local', '%Y'  %}}" --merge-copyrights $_})
    (Get-ChildItem -Recurse -Path .\{{ cookiecutter.pkg_name }}\*.json,.\tests\*.json.\docs\*.json).ForEach({poetry run reuse annotate --license={{ cookiecutter.open_source_license }} --copyright="{{ cookiecutter.full_name.replace('\"', '\\\"') }}" --year="{env:YEAR:{% now 'local', '%Y'  %}}" --merge-copyrights --force-dot-license $_})
    (Get-ChildItem -Recurse -Path .\.github\*.yml,.\.github\*.md ).ForEach({poetry run reuse annotate --license={{ cookiecutter.open_source_license }} --copyright="{{ cookiecutter.full_name.replace('\"', '\\\"') }}" --year="{env:YEAR:{% now 'local', '%Y'  %}}" --merge-copyrights $_ })
    poetry run reuse annotate --license={{ cookiecutter.open_source_license }} --copyright="{{ cookiecutter.full_name.replace('\"', '\\\"') }}" --year="{env:YEAR:{% now 'local', '%Y'  %}}" --merge-copyrights --style python ./.editorconfig ./.gitignore ./.yamllint ./.pre-commit-config.yaml
    poetry run reuse annotate --license={{ cookiecutter.open_source_license }} --copyright="{{ cookiecutter.full_name.replace('\"', '\\\"') }}" --year="{env:YEAR:{% now 'local', '%Y'  %}}" --merge-copyrights ./docs/Makefile ./docs/make.bat ./pyproject.toml
    (Get-ChildItem -Recurse -Path .\*.rst,.\*.md,.\*.lock,.\*.cfg).ForEach({poetry run reuse annotate --license={{ cookiecutter.open_source_license }} --copyright="{{ cookiecutter.full_name.replace('\"', '\\\"') }}" --year="{env:YEAR:{% now 'local', '%Y'  %}}" --merge-copyrights --force-dot-license $_ })    
    poetry run reuse download --all
    poetry run python -c "from pathlib import Path;import os;f=Path(Path.cwd() / 'LICENSES/{{ cookiecutter.open_source_license }}.txt');f.write_text(f.read_text().replace('{% now 'local', '%Y' %} {{ cookiecutter.full_name.replace('\"', '\\\"') }}', '{% now 'local', '%Y' %} - {} {{ cookiecutter.full_name.replace('\"', '\\\"') }}'.format(os.environ['YEAR'])))"
    # sed -i '' -e 's/<year>/{% now 'local', '%Y' %}/g;s/<copyright holders>/{{ cookiecutter.full_name.replace('\"', '\\\"') }}/g' LICENSES/{{ cookiecutter.open_source_license }}.txt


[testenv:lint]
description = Lint the code
ignore_errors = True
skip_install = true
allowlist_externals =
    {[dev]allowlist_externals}
commands_pre =
    {[testenv:build]commands}
    poetry install
commands =
    poetry run flake8 {{ cookiecutter.pkg_name }} tests
    {%- if cookiecutter.use_mypy == 'y' %}
    poetry run mypy --install-types {{ cookiecutter.pkg_name }} tests
    {%- endif %}
    poetry run yamllint -f colored {{ cookiecutter.pkg_name }}
    poetry run codespell {{ cookiecutter.pkg_name }} docs/source
    poetry run pylint {{ cookiecutter.pkg_name }}
    poetry run darglint -v 2 {{ cookiecutter.pkg_name }}
    poetry run bandit -r {{ cookiecutter.pkg_name }}
    poetry run reuse lint
    # poetry run python-active-versions
    poetry run check-python-versions .

[testenv:build]
description = Build package
allowlist_externals =
    {[dev]allowlist_externals}
commands_pre =
	{[dev]commands}
commands =
    poetry build
    poetry run twine check dist/*

[testenv:docs]
description = Build docs
allowlist_externals =
    {[dev]allowlist_externals}
setenv =
    file|year.log
commands_pre =
	{[dev]commands}
commands =
    {%- if 'mkdocs' in cookiecutter.doc_generator|lower %}
    poetry run mkdocs build
    {%- else %}
    poetry run sphinx-build -b html docs/source/ docs/build/html
    {%- endif %}

[testenv:release]
description = Run release task
skip_install = true
allowlist_externals =
    {[dev]allowlist_externals}
commands_pre =
	{[dev]commands}
commands =
    poetry run cz bump --changelog
    poetry build
    # poetry publish -r ...
